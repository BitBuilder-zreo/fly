{
    "$schema": "https://json.schemastore.org/tsconfig",
    "display": "Node Server  Config",
    "extends": "./base.json",
    "compilerOptions": {
        "module": "commonjs",
        "declaration": false,
        "removeComments": true,
        "emitDecoratorMetadata": true,
        "experimentalDecorators": true,
        "target": "es6",
        "sourceMap": false,
        "esModuleInterop": true,
        "outDir": "./dist",
        "baseUrl": "./"
    },
    "exclude": [
        "node_modules"
    ]
}
/*
"$schema": "https://json.schemastore.org/tsconfig"：指定 JSON 文件的模式（schema），用于验证 tsconfig.json 文件的正确性。

"display": "Node Server Config"：此属性是自定义的，用于描述该配置的显示名称。

"extends": "./base.json"：这个配置文件继承了另一个名为 base.json 的配置文件。这意味着在此文件中的设置将会继承 base.json 中的设置，并且可能进行一些覆盖或扩展。

"compilerOptions"：这是一个对象，包含了各种编译器选项的配置。

"module": "commonjs"：指定生成的模块代码的模块系统为 CommonJS，这是 Node.js 默认的模块系统。

"declaration": false：禁止生成相应的 .d.ts 声明文件，即不生成类型定义文件。

"removeComments": true：在输出的 JavaScript 文件中移除注释。如果启用，TypeScript 编译器将从生成的 JavaScript 代码中移除所有注释。

"emitDecoratorMetadata": true：生成装饰器的元数据。这对于某些库和框架需要使用装饰器的场景非常有用。

"experimentalDecorators": true：启用实验性的装饰器特性。装饰器是一种用于修改类、方法或属性行为的特殊语法。

"target": "es6"：将 TypeScript 编译为 ECMAScript 6 版本的代码。

"sourceMap": false：是否生成源映射文件（.map 文件）。如果设置为 false，则不生成源映射文件。

"esModuleInterop": true：允许以 ES 模块的形式导入 CommonJS 模块。这使得在 TypeScript 项目中使用 CommonJS 模块时更加方便。

"outDir": "./dist"：指定编译输出文件的目录为 ./dist 文件夹。

"baseUrl": "./"：指定解析非相对模块名的基本目录。在此例中，基本目录为当前目录。

"exclude": ["node_modules"]：排除在编译过程中不需要包含的文件或文件夹。在此例中，排除了 node_modules 文件夹。

这个 tsconfig.json 配置文件用于一个 Node.js 服务器项目，它使用 CommonJS 模块系统，并且编译输出到 ./dist 文件夹。启用了一些装饰器特性和元数据，同时禁用了生成声明文件和源映射文件的选项。
  */